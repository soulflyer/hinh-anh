["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$mranderson047.re-frame.v0v10v2.re-frame.loggers","~$set-timeout!","~$mranderson047.re-frame.v0v10v2.re-frame.interop"],"~:excludes",["~#set",[]],"~:name","~$mranderson047.re-frame.v0v10v2.re-frame.fx","~:imports",null,"~:requires",["^ ","~$router","~$mranderson047.re-frame.v0v10v2.re-frame.router","^>","^>","~$mranderson047.re-frame.v0v10v2.re-frame.db","^?","~$mranderson047.re-frame.v0v10v2.re-frame.interceptor","^@","^6","^6","~$events","~$mranderson047.re-frame.v0v10v2.re-frame.events","^B","^B","~$mranderson047.re-frame.v0v10v2.re-frame.registrar","^C","^4","^4"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","~$app-db","^?","~$->interceptor","^@","^5","^6","~$get-handler","^C","~$clear-handlers","^C","~$register-handler","^C"],"~:defs",["^ ","~$kind",["^ ","^9","~$mranderson047.re-frame.v0v10v2.re-frame.fx/kind","~:file","app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","~:line",14,"~:column",1,"~:end-line",14,"~:end-column",10,"~:meta",["^ ","^N","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","^O",14,"^P",6,"^Q",14,"^R",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^S",["^ ","^N","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","^O",17,"^P",7,"^Q",17,"^R",13,"~:arglists",["~#list",["~$quote",["^Y",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^9","~$mranderson047.re-frame.v0v10v2.re-frame.fx/reg-fx","~:variadic",false,"^N","app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","^R",13,"~:method-params",["^Y",[["^[","^10"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^P",1,"^O",17,"^Q",17,"~:max-fixed-arity",2,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[["^[","^10"]]]]],"^11","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^9","~$mranderson047.re-frame.v0v10v2.re-frame.fx/do-fx","^N","app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","^O",46,"^P",1,"^Q",46,"^R",11,"^S",["^ ","^N","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc","^O",46,"^P",6,"^Q",46,"^R",11],"^11","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.","^T","~$any"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:db","~:do-fx","~:dispatch-n","~:deregister-event-handler","~:dispatch","~:after","~:id","~:effects","~:error","~:ms","~:fx","~:dispatch-later"]],"~:order",["^1J","^1F","^1A","^1E","^1G","^1H","^1K","^1I","^1D","^1B","^1C","^1@"]],"^11",null]