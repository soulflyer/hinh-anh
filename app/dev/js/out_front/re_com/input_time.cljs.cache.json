["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$parseInt",["^ "],"~$isNaN",["^ "]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$handler-fn","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^A","^A","^7","^7","~$re-com.text","^B","~$re-com.box","^C","~$re-com.util","^D"],"~:uses",["^ ","~$html-attr?","^7","~$h-box","^C","~$deref-or-value","^D","~$css-style?","^7","~$label","^B","~$number-or-string?","^7","~$pad-zero-number","^D","~$gap","^C"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","~:line",50,"~:column",8,"~:end-line",50,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^Y",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^W",true,"^<","~$re-com.input-time/text->time","~:variadic",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",18,"~:method-params",["^Y",[["^["]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^T",1,"^S",50,"^U",50,"~:max-fixed-arity",1,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",116,"^T",8,"^U",116,"^V",18,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^10","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^W",true,"^<","~$re-com.input-time/on-defocus","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",18,"^13",["^Y",[["^19","^1:","^1;","^1<","^1="]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",116,"^U",116,"^16",5,"^17",true,"^X",["^Y",["^Z",["^Y",[["^19","^1:","^1;","^1<","^1="]]]]],"^10","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",74,"^T",8,"^U",74,"^V",19,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$time"]]]]]],"^W",true,"^<","~$re-com.input-time/valid-time?","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",19,"^13",["^Y",[["^1@"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",74,"^U",74,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]]],"~$input-time-args-desc",["^ ","^<","~$re-com.input-time/input-time-args-desc","^R","app/dev/js/out_front/re_com/input_time.cljs","^S",127,"^T",1,"^U",127,"^V",26,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",127,"^T",6,"^U",127,"^V",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",15,"^T",8,"^U",15,"^V",17,"^W",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]]],"^W",true,"^<","~$re-com.input-time/time->hrs","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",17,"^13",["^Y",[["^1@"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",15,"^U",15,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]]],"~$time->mins",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",10,"^T",8,"^U",10,"^V",18,"^W",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]]],"^W",true,"^<","~$re-com.input-time/time->mins","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",18,"^13",["^Y",[["^1@"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",10,"^U",10,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]]],"~$triple->time",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",25,"^T",8,"^U",25,"^V",20,"^W",true,"^X",["^Y",["^Z",["^Y",[[["~$hr","~$_","~$mi"]]]]]],"^10","Return a time integer from a triple int vector of form  [H  _  M]"],"^W",true,"^<","~$re-com.input-time/triple->time","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",20,"^13",["^Y",[["~$p__10161"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",25,"^U",25,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[[["^1K","~$_","^1L"]]]]]],"^10","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",66,"^T",8,"^U",66,"^V",19,"^W",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^W",true,"^<","~$re-com.input-time/valid-text?","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",19,"^13",["^Y",[["^["]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",66,"^U",66,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]],"^10","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",59,"^T",8,"^U",59,"^V",18,"^W",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]],"^10","return a string of format HH:MM for 'time'"],"^W",true,"^<","~$re-com.input-time/time->text","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",18,"^13",["^Y",[["^1@"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",59,"^U",59,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1@"]]]]],"^10","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^<","~$re-com.input-time/triple-seeking-re","^R","app/dev/js/out_front/re_com/input_time.cljs","^S",39,"^T",1,"^U",40,"^V",20,"^W",true,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",40,"^T",3,"^U",40,"^V",20,"^W",true],"^1D","~$any"],"~$on-new-keypress",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",101,"^T",8,"^U",101,"^V",23,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$event","^19"]]]]],"^10","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^W",true,"^<","~$re-com.input-time/on-new-keypress","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",23,"^13",["^Y",[["^1W","^19"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",101,"^U",101,"^16",2,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1W","^19"]]]]],"^10","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",19,"^T",8,"^U",19,"^V",14,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"^10","Parse the string 's' to a valid int. On parse failure, return 0"],"^W",true,"^<","~$re-com.input-time/to-int","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",14,"^13",["^Y",[["~$s"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",19,"^U",19,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"^10","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",42,"^T",8,"^U",42,"^V",32,"^W",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"^W",true,"^<","~$re-com.input-time/extract-triple-from-text","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",32,"^13",["^Y",[["^["]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",42,"^U",42,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"~$validate-arg-times",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",82,"^T",8,"^U",82,"^V",26,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$model","~$minimum","~$maximum"]]]]]],"^W",true,"^<","~$re-com.input-time/validate-arg-times","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",26,"^13",["^Y",[["^22","^23","^24"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",82,"^U",82,"^16",3,"^17",true,"^X",["^Y",["^Z",["^Y",[["^22","^23","^24"]]]]]],"~$force-valid-time",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",90,"^T",8,"^U",90,"^V",24,"^W",true,"^X",["^Y",["^Z",["^Y",[["^1@","^1:","^1;","~$previous"]]]]],"^10","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^W",true,"^<","~$re-com.input-time/force-valid-time","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",24,"^13",["^Y",[["^1@","^1:","^1;","^27"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",90,"^U",90,"^16",4,"^17",true,"^X",["^Y",["^Z",["^Y",[["^1@","^1:","^1;","^27"]]]]],"^10","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",141,"^T",7,"^U",141,"^V",17,"^X",["^Y",["^Z",["^Y",[["~$&",["^ ","~:keys",["^22","^23","^24","~$on-change","~$class","~$style","~$attr"],"~:as","~$args","~:or",["^ ","^23",0,"^24",2359]]]]]]],"^10","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^12",true,"^16",0,"^13",[["^Y",[["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^X",["^Y",[["~$&",["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^15",["^Y",[null]]]],"^<","~$re-com.input-time/input-time","^12",true,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",17,"^2B",["^ ","^12",true,"^16",0,"^13",[["^Y",[["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^X",["^Y",[["~$&",["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^15",["^Y",[null]]],"^13",[["^Y",[["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^14",null,"^15",["^Y",[null]],"^T",1,"^S",141,"^U",141,"^16",0,"^17",true,"^X",["^Y",[["~$&",["^ ","^2:",["^22","^23","^24","^2;","^2<","^2=","^2>"],"^2?","^2@","^2A",["^ ","^23",0,"^24",2359]]]]],"^10","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^P",null,"^Q",["^ ","^R","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/input_time.cljs","^S",109,"^T",8,"^U",109,"^V",27,"^W",true,"^X",["^Y",["^Z",["^Y",[["~$ev"]]]]],"^10","When Enter is pressed, force the component to lose focus"],"^W",true,"^<","~$re-com.input-time/lose-focus-if-enter","^12",false,"^R","app/dev/js/out_front/re_com/input_time.cljs","^V",27,"^13",["^Y",[["^2E"]]],"^14",null,"^15",["^Y",[null,null]],"^T",1,"^S",109,"^U",109,"^16",1,"^17",true,"^X",["^Y",["^Z",["^Y",[["^2E"]]]]],"^10","When Enter is pressed, force the component to lose focus"]],"~:require-macros",["^ ","^9","^9","^@","^A","^A","^A","^7","^7"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^<","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^2N","^<","^38","^2V","^32","^2J","^3<","^35","^2P","^2Z","^2R","^37","^2[","^2S","^2T","^39","^2Y","^2W","^3=","^3:","^30","^33","^36","^2K","^34","^2Q","^2M","^2U","^2X","^2L","^2O","^31","^3;"]],"^10",null]