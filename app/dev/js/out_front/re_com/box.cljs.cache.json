["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^>","^>","^6","^6"],"~:uses",["^ ","~$html-attr?","^6","~$scroll-style?","^6","~$align-style?","^6","~$justify-style?","^6","~$scroll-options-list","^6","~$css-style?","^6","~$justify-options-list","^6","~$string-or-hiccup?","^6","~$align-options-list","^6"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","~:line",82,"~:column",7,"~:end-line",82,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^S",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^9","~$re-com.box/align-style","~:variadic",false,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",18,"~:method-params",["^S",[["^U","^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^O",1,"^N",82,"^P",82,"~:max-fixed-arity",2,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",233,"^O",7,"^P",233,"^Q",12,"^R",["^S",["^T",["^S",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^V","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^15","none","^1<","~:start","^V","~:stretch"],"~:as","~$args"]]]]]],"^W","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/h-box","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",12,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",233,"^P",233,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^W","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",473,"^O",7,"^P",473,"^Q",13,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]]]],"^W","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/border","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",13,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",473,"^P",473,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^W","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$flex-flow-style",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",60,"^O",7,"^P",60,"^Q",22,"^R",["^S",["^T",["^S",[["~$flex-flow"]]]]],"^W","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^9","~$re-com.box/flex-flow-style","^Y",false,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",22,"^Z",["^S",[["^1U"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",60,"^P",60,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1U"]]]]],"^W","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^9","~$re-com.box/h-box-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",214,"^O",1,"^P",214,"^Q",21,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",214,"^O",6,"^P",214,"^Q",21],"~:tag","~$cljs.core/IVector"],"~$scroller",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",407,"^O",7,"^P",407,"^Q",15,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","~$scroll","~$h-scroll","~$v-scroll","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]]]],"^W","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/scroller","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",15,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",407,"^P",407,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","auto"],"^1H","^1I"]]]],"^W","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",352,"^O",7,"^P",352,"^Q",10,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]]]],"^W","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/box","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",10,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",352,"^P",352,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1R","^1B","^1C","^1D"],"^1E",["^ ","^15","none"],"^1H","^1I"]]]],"^W","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^9","~$re-com.box/box-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",334,"^O",1,"^P",334,"^Q",19,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",334,"^O",6,"^P",334,"^Q",19],"^1Y","^1Z"],"~$debug",["^ ","^9","~$re-com.box/debug","^M","app/dev/js/out_front/re_com/box.cljs","^N",6,"^O",1,"^P",6,"^Q",11,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",6,"^O",6,"^P",6,"^Q",11],"^1Y","~$boolean"],"~$justify-style",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",66,"^O",7,"^P",66,"^Q",20,"^R",["^S",["^T",["^S",[["^1<"]]]]],"^W","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^9","~$re-com.box/justify-style","^Y",false,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",20,"^Z",["^S",[["^1<"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",66,"^P",66,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1<"]]]]],"^W","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^9","~$re-com.box/gap-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",157,"^O",1,"^P",157,"^Q",19,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",157,"^O",6,"^P",157,"^Q",19],"^1Y","^1Z"],"~$v-box",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",293,"^O",7,"^P",293,"^Q",12,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]]]],"^W","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/v-box","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",12,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",293,"^P",293,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"],"^1E",["^ ","^15","none","^1<","^1F","^V","^1G"],"^1H","^1I"]]]],"^W","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",13,"^O",7,"^P",13,"^Q",23,"^R",["^S",["^T",["^S",[["^15"]]]]],"^W","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^9","~$re-com.box/flex-child-style","^Y",false,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",23,"^Z",["^S",[["^15"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",13,"^P",13,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^15"]]]]],"^W","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^9","~$re-com.box/line-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",186,"^O",1,"^P",186,"^Q",20,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",186,"^O",6,"^P",186,"^Q",20],"^1Y","^1Z"],"~$scroller-args-desc",["^ ","^9","~$re-com.box/scroller-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",382,"^O",1,"^P",382,"^Q",24,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",382,"^O",6,"^P",382,"^Q",24],"^1Y","^1Z"],"~$line",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",193,"^O",7,"^P",193,"^Q",11,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","~$color","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]]]],"^W","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/line","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",11,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",193,"^P",193,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^2H","^1B","^1C","^1D"],"^1E",["^ ","^15","1px","^2H","lightgray"],"^1H","^1I"]]]],"^W","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",99,"^O",7,"^P",99,"^Q",19,"^R",["^S",["^T",["^S",[["^U","^20"]]]]],"^W","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^9","~$re-com.box/scroll-style","^Y",false,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",19,"^Z",["^S",[["^U","^20"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",99,"^P",99,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^20"]]]]],"^W","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1@",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",165,"^O",7,"^P",165,"^Q",10,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]]]],"^W","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^10",["^S",[null]]]],"^9","~$re-com.box/gap","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",10,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",165,"^P",165,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^16","^17","^1B","^1C","^1D"],"^1H","^1I"]]]],"^W","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^9","~$re-com.box/border-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",452,"^O",1,"^P",452,"^Q",22,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",452,"^O",6,"^P",452,"^Q",22],"^1Y","^1Z"],"~$v-box-args-desc",["^ ","^9","~$re-com.box/v-box-args-desc","^M","app/dev/js/out_front/re_com/box.cljs","^N",274,"^O",1,"^P",274,"^Q",21,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",274,"^O",6,"^P",274,"^Q",21],"^1Y","^1Z"],"~$box-base",["^ ","^K",null,"^L",["^ ","^M","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_com/box.cljs","^N",115,"^O",8,"^P",115,"^Q",16,"~:private",true,"^R",["^S",["^T",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","~$bk-color","^1R","~$class-name","^1B","^1C","^1D"]]]]]]],"^W","This should generally NOT be used as it is the basis for the box, scroller and border components","^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^10",["^S",[null]]]],"^2R",true,"^9","~$re-com.box/box-base","^Y",true,"^M","app/dev/js/out_front/re_com/box.cljs","^Q",16,"^1J",["^ ","^Y",true,"^11",0,"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^10",["^S",[null]]],"^Z",[["^S",[["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",115,"^P",115,"^11",0,"^12",true,"^R",["^S",[["~$&",["^ ","^14",["^15","^20","^21","^22","^16","^17","^18","^19","^1:","^1;","^1<","^V","^1=","^1>","^1?","^1L","^1M","^1N","^1O","^1P","^1Q","^2S","^1R","^2T","^1B","^1C","^1D"]]]]],"^W","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^9","~:-webkit-flex-flow","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1F","~:type","~:flex","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1G","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^3>","^3B","^3;","^47","^3?","^3O","^3W","^3X","^3Y","^41","^44","^48","^49","^2Z","^31","^32","^33","^36","^37","^38","^3=","^3@","^3C","^3D","^3E","^3G","^3H","^3K","^3M","^3L","^3N","^3Q","^3V","^3:","^3S","^3[","^30","^3F","^34","^3Z","^45","^40","^3<","^3I","^9","^43","^3A","^3T","^2Y","^46","^3R","^3U","^39","^35","^2[","^3J","^1F","^1G","^3P","^42"]],"^W",null]