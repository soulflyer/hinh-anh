["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^B","~$fx","~$re-frame.fx","~$re-frame.events","^E","~$loggers","~$re-frame.loggers","^D","^D","~$re-frame.registrar","^H","~$interceptor","^B","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^H","^K","^K","^?","^?","~$events","^E","~$re-frame.std-interceptors","^P","^G","^G","^=","^=","~$interop","^;","~$std-interceptors","^P","^A","^A","^M","^M"],"~:uses",["^ ","~$ctx-handler->interceptor","^P","~$fx-handler->interceptor","^P","~$db-handler->interceptor","^P"],"~:defs",["^ ","~$console",["^ ","^7","~$re-frame.core/console","~:file","app/dev/js/out_front/re_frame/core.cljc","~:line",164,"~:column",1,"~:end-line",164,"~:end-column",13,"~:meta",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",164,"^10",6,"^11",164,"^12",13]],"~$on-changes",["^ ","^7","~$re-frame.core/on-changes","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",127,"^10",1,"^11",127,"^12",16,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",127,"^10",6,"^11",127,"^12",16]],"~$enrich",["^ ","^7","~$re-frame.core/enrich","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",124,"^10",1,"^11",124,"^12",12,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",124,"^10",6,"^11",124,"^12",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",51,"^10",7,"^11",51,"^12",18,"~:arglists",["~#list",["~$quote",["^1;",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^7","~$re-frame.core/reg-sub-raw","~:variadic",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",18,"~:method-params",["^1;",[["^1=","^1>"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^10",1,"^[",51,"^11",51,"~:max-fixed-arity",2,"~:fn-var",true,"^1:",["^1;",["^1<",["^1;",[["^1=","^1>"]]]]],"^1?","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^7","~$re-frame.core/subscribe","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",46,"^10",1,"^11",46,"^12",15,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",46,"^10",6,"^11",46,"^12",15]],"~$assoc-coeffect",["^ ","^7","~$re-frame.core/assoc-coeffect","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",144,"^10",1,"^11",144,"^12",20,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",144,"^10",6,"^11",144,"^12",20]],"~$register-sub",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",234,"^10",7,"^11",234,"^12",19,"^1:",["^1;",["^1<",["^1;",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]]],"^7","~$re-frame.core/register-sub","^1A",true,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]],"^1B",[["^1;",["^1L"]]],"^1C",null,"^1D",["^1;",[null]],"^10",1,"^[",234,"^11",234,"^1E",0,"^1F",true,"^1:",["^1;",[["~$&","^1L"]]]],"~$purge-event-queue",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",194,"^10",7,"^11",194,"^12",24,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Remove all events queued for processing"],"^7","~$re-frame.core/purge-event-queue","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",24,"^1B",["^1;",[[]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",194,"^11",194,"^1E",0,"^1F",true,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",222,"^10",7,"^11",222,"^12",33,"^1:",["^1;",["^1<",["^1;",[["~$id"]]]]]],"^7","~$re-frame.core/remove-post-event-callback","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",33,"^1B",["^1;",[["^1R"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",222,"^11",222,"^1E",1,"^1F",true,"^1:",["^1;",["^1<",["^1;",[["^1R"]]]]]],"~$path",["^ ","^7","~$re-frame.core/path","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",123,"^10",1,"^11",123,"^12",10,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",123,"^10",6,"^11",123,"^12",10]],"~$reg-sub",["^ ","^7","~$re-frame.core/reg-sub","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",45,"^10",1,"^11",45,"^12",13,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",45,"^10",6,"^11",45,"^12",13]],"~$make-restore-fn",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",169,"^10",7,"^11",169,"^12",22,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^7","~$re-frame.core/make-restore-fn","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",22,"^1B",["^1;",[[]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",169,"^11",169,"^1E",0,"^1F",true,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^7","~$re-frame.core/clear-fx","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",61,"^10",1,"^11",61,"^12",14,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",61,"^10",6,"^11",61,"^12",14],"~:tag","~$any"],"~$get-effect",["^ ","^7","~$re-frame.core/get-effect","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",145,"^10",1,"^11",145,"^12",16,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",145,"^10",6,"^11",145,"^12",16]],"~$reg-event-db",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",71,"^10",7,"^11",71,"^12",19,"^1:",["^1;",["^1<",["^1;",[["^1R","~$handler"],["^1R","~$interceptors","^25"]]]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-db","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",71,"^11",71,"^1E",3,"^1F",true,"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^7","~$re-frame.core/dispatch-sync","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",41,"^10",1,"^11",41,"^12",19,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",41,"^10",6,"^11",41,"^12",19]],"~$clear-event",["^ ","^7","~$re-frame.core/clear-event","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",116,"^10",1,"^11",116,"^12",17,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",116,"^10",6,"^11",116,"^12",17],"^20","^21"],"~$->interceptor",["^ ","^7","~$re-frame.core/->interceptor","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",142,"^10",1,"^11",142,"^12",19,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",142,"^10",6,"^11",142,"^12",19]],"~$set-loggers!",["^ ","^7","~$re-frame.core/set-loggers!","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",157,"^10",1,"^11",157,"^12",18,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",157,"^10",6,"^11",157,"^12",18]],"~$inject-cofx",["^ ","^7","~$re-frame.core/inject-cofx","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",65,"^10",1,"^11",65,"^12",17,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",65,"^10",6,"^11",65,"^12",17]],"~$get-coeffect",["^ ","^7","~$re-frame.core/get-coeffect","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",143,"^10",1,"^11",143,"^12",18,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",143,"^10",6,"^11",143,"^12",18]],"~$debug",["^ ","^7","~$re-frame.core/debug","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",122,"^10",1,"^11",122,"^12",11,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",122,"^10",6,"^11",122,"^12",11],"^20","^21"],"~$assoc-effect",["^ ","^7","~$re-frame.core/assoc-effect","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",146,"^10",1,"^11",146,"^12",18,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",146,"^10",6,"^11",146,"^12",18]],"~$enqueue",["^ ","^7","~$re-frame.core/enqueue","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",147,"^10",1,"^11",147,"^12",13,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",147,"^10",6,"^11",147,"^12",13]],"~$clear-cofx",["^ ","^7","~$re-frame.core/clear-cofx","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",66,"^10",1,"^11",66,"^12",16,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",66,"^10",6,"^11",66,"^12",16],"^20","^21"],"~$reg-event-ctx",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",104,"^10",7,"^11",104,"^12",20,"^1:",["^1;",["^1<",["^1;",[["^1R","^25"],["^1R","^26","^25"]]]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-ctx","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",20,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",104,"^11",104,"^1E",3,"^1F",true,"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^7","~$re-frame.core/reg-fx","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",60,"^10",1,"^11",60,"^12",12,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",60,"^10",6,"^11",60,"^12",12]],"~$trim-v",["^ ","^7","~$re-frame.core/trim-v","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",125,"^10",1,"^11",125,"^12",12,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",125,"^10",6,"^11",125,"^12",12],"^20","^21"],"~$clear-sub",["^ ","^7","~$re-frame.core/clear-sub","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",48,"^10",1,"^11",48,"^12",15,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",48,"^10",6,"^11",48,"^12",15],"^20","^21"],"~$dispatch",["^ ","^7","~$re-frame.core/dispatch","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",40,"^10",1,"^11",40,"^12",14,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",40,"^10",6,"^11",40,"^12",14]],"~$after",["^ ","^7","~$re-frame.core/after","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",126,"^10",1,"^11",126,"^12",11,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",126,"^10",6,"^11",126,"^12",11]],"~$add-post-event-callback",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",201,"^10",7,"^11",201,"^12",30,"^1:",["^1;",["^1<",["^1;",[["~$f"],["^1R","~$f"]]]]],"^1?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^1M",["^ ","^1A",false,"^1E",2,"^1B",["^1;",[["~$f"],["^1R","~$f"]]],"^1:",["^1;",[["~$f"],["^1R","~$f"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/add-post-event-callback","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",30,"^1M",["^ ","^1A",false,"^1E",2,"^1B",["^1;",[["~$f"],["^1R","~$f"]]],"^1:",["^1;",[["~$f"],["^1R","~$f"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["~$f"],["^1R","~$f"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",201,"^11",201,"^1E",2,"^1F",true,"^1:",["^1;",[["~$f"],["^1R","~$f"]]],"^1?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^7","~$re-frame.core/reg-cofx","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",64,"^10",1,"^11",64,"^12",14,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",64,"^10",6,"^11",64,"^12",14]],"~$reg-event-fx",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",87,"^10",7,"^11",87,"^12",19,"^1:",["^1;",["^1<",["^1;",[["^1R","^25"],["^1R","^26","^25"]]]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-fx","^1A",false,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",87,"^11",87,"^1E",3,"^1F",true,"^1:",["^1;",[["^1R","^25"],["^1R","^26","^25"]]],"^1?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^19",null,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",229,"^10",7,"^11",229,"^12",23,"^1:",["^1;",["^1<",["^1;",[["~$&","^1L"]]]]],"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]]],"^7","~$re-frame.core/register-handler","^1A",true,"^Z","app/dev/js/out_front/re_frame/core.cljc","^12",23,"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]],"^1B",[["^1;",["^1L"]]],"^1C",null,"^1D",["^1;",[null]],"^10",1,"^[",229,"^11",229,"^1E",0,"^1F",true,"^1:",["^1;",[["~$&","^1L"]]]],"~$clear-subscription-cache!",["^ ","^7","~$re-frame.core/clear-subscription-cache!","^Z","app/dev/js/out_front/re_frame/core.cljc","^[",49,"^10",1,"^11",49,"^12",31,"^13",["^ ","^Z","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/core.cljc","^[",49,"^10",6,"^11",49,"^12",31]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:warn"]],"~:order",["^39"]],"^1?",null]