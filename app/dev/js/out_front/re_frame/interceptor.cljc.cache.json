["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$empty-queue","~$re-frame.interop","~$debug-enabled?","^8"],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","^6","^6","^8","^8","~$trace","~$re-frame.trace","^A","^A","~$set","~$clojure.set","^C","^C"],"~:uses",["^ ","^5","^6","^7","^8","^9","^8"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","~:line",72,"~:column",8,"~:end-line",72,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^P",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^N",true,"^<","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",27,"~:method-params",["^P",[["^R","^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^K",1,"^J",72,"^L",72,"~:max-fixed-arity",2,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^T","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",54,"^K",7,"^L",54,"^M",21,"^O",["^P",["^Q",["^P",[["^R","~$key","~$value"]]]]]],"^<","~$re-frame.interceptor/assoc-coeffect","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",21,"^W",["^P",[["^R","^11","^12"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",54,"^L",54,"^Z",3,"^[",true,"^O",["^P",["^Q",["^P",[["^R","^11","^12"]]]]]],"~$update-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",58,"^K",7,"^L",58,"^M",22,"^O",["^P",["^Q",["^P",[["^R","^11","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^V",true,"^Z",3,"^W",[["^P",["^R","^11","~$f","^15"]]],"^O",["^P",[["^R","^11","~$f","~$&","^15"]]],"^Y",["^P",[null]]]],"^<","~$re-frame.interceptor/update-coeffect","^V",true,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",22,"^16",["^ ","^V",true,"^Z",3,"^W",[["^P",["^R","^11","~$f","^15"]]],"^O",["^P",[["^R","^11","~$f","~$&","^15"]]],"^Y",["^P",[null]]],"^W",[["^P",["^R","^11","~$f","^15"]]],"^X",null,"^Y",["^P",[null]],"^K",1,"^J",58,"^L",58,"^Z",3,"^[",true,"^O",["^P",[["^R","^11","~$f","~$&","^15"]]]],"~$invoke-interceptor-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",65,"^K",8,"^L",65,"^M",29,"^N",true,"^O",["^P",["^Q",["^P",[["^R","~$interceptor","^S"]]]]]],"^N",true,"^<","~$re-frame.interceptor/invoke-interceptor-fn","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",29,"^W",["^P",[["^R","^19","^S"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",65,"^L",65,"^Z",3,"^[",true,"^O",["^P",["^Q",["^P",[["^R","^19","^S"]]]]]],"~$get-effect",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",31,"^K",7,"^L",31,"^M",17,"^O",["^P",["^Q",["^P",[["^R"],["^R","^11"],["^R","^11","~$not-found"]]]]],"^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^Y",["^P",[null,null,null]]]],"^<","~$re-frame.interceptor/get-effect","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",17,"^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^Y",["^P",[null,null,null]]],"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^X",null,"^Y",["^P",[null,null,null]],"^K",1,"^J",31,"^L",31,"^Z",3,"^[",true,"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]]],"~$->interceptor",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",17,"^K",7,"^L",17,"^M",20,"^O",["^P",["^Q",["^P",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^T","Create an interceptor from named arguments","^16",["^ ","^V",true,"^Z",0,"^W",[["^P",[["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^O",["^P",[["~$&",["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^Y",["^P",[null]]]],"^<","~$re-frame.interceptor/->interceptor","^V",true,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",20,"^16",["^ ","^V",true,"^Z",0,"^W",[["^P",[["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^O",["^P",[["~$&",["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^Y",["^P",[null]]],"^W",[["^P",[["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^X",null,"^Y",["^P",[null]],"^K",1,"^J",17,"^L",17,"^Z",0,"^[",true,"^O",["^P",[["~$&",["^ ","^1?","~$m","^1@",["^1A","^1B","^1C"]]]]],"^T","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",46,"^K",7,"^L",46,"^M",19,"^O",["^P",["^Q",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]]]],"^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^Y",["^P",[null,null,null]]]],"^<","~$re-frame.interceptor/get-coeffect","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",19,"^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^Y",["^P",[null,null,null]]],"^W",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]],"^X",null,"^Y",["^P",[null,null,null]],"^K",1,"^J",46,"^L",46,"^Z",3,"^[",true,"^O",["^P",[["^R"],["^R","^11"],["^R","^11","^1<"]]]],"~$execute",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",146,"^K",7,"^L",146,"^M",14,"^O",["^P",["^Q",["^P",[["~$event-v","~$interceptors"]]]]],"^T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^<","~$re-frame.interceptor/execute","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",14,"^W",["^P",[["^1H","^1I"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",146,"^L",146,"^Z",2,"^[",true,"^O",["^P",["^Q",["^P",[["^1H","^1I"]]]]],"^T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",40,"^K",7,"^L",40,"^M",19,"^O",["^P",["^Q",["^P",[["^R","^11","^12"]]]]]],"^<","~$re-frame.interceptor/assoc-effect","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",19,"^W",["^P",[["^R","^11","^12"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",40,"^L",40,"^Z",3,"^[",true,"^O",["^P",["^Q",["^P",[["^R","^11","^12"]]]]]],"~$enqueue",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",109,"^K",7,"^L",109,"^M",14,"^O",["^P",["^Q",["^P",[["^R","^1I"]]]]],"^T","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^<","~$re-frame.interceptor/enqueue","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",14,"^W",["^P",[["^R","^1I"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",109,"^L",109,"^Z",2,"^[",true,"^O",["^P",["^Q",["^P",[["^R","^1I"]]]]],"^T","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^<","~$re-frame.interceptor/mandatory-interceptor-keys","^I","app/dev/js/out_front/re_frame/interceptor.cljc","^J",9,"^K",1,"^L",9,"^M",32,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",9,"^K",6,"^L",9,"^M",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",11,"^K",7,"^L",11,"^M",19,"^O",["^P",["^Q",["^P",[["~$m"]]]]]],"^<","~$re-frame.interceptor/interceptor?","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",19,"^W",["^P",[["~$m"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",11,"^L",11,"^Z",1,"^[",true,"^O",["^P",["^Q",["^P",[["~$m"]]]]]],"~$change-direction",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",132,"^K",8,"^L",132,"^M",24,"^N",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^N",true,"^<","~$re-frame.interceptor/change-direction","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",24,"^W",["^P",[["^R"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",132,"^L",132,"^Z",1,"^[",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^R",["^ ","^G",null,"^H",["^ ","^I","/Users/iain/Code/Clojure/Descjop/anh/app/dev/js/out_front/re_frame/interceptor.cljc","^J",121,"^K",8,"^L",121,"^M",15,"^N",true,"^O",["^P",["^Q",["^P",[["~$event","^1I"],["^1W","^1I","~$db"]]]]],"^T","Create a fresh context","^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^O",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^Y",["^P",[null,null]]]],"^N",true,"^<","~$re-frame.interceptor/context","^V",false,"^I","app/dev/js/out_front/re_frame/interceptor.cljc","^M",15,"^16",["^ ","^V",false,"^Z",3,"^W",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^O",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^Y",["^P",[null,null]]],"^W",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^X",null,"^Y",["^P",[null,null]],"^K",1,"^J",121,"^L",121,"^Z",3,"^[",true,"^O",["^P",[["^1W","^1I"],["^1W","^1I","^1X"]]],"^T","Create a fresh context"]],"~:require-macros",["^ ","^@","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^26","^27","^2=","^2:","^21","^28","^2;","^24","^29","^25","^23","^22","^2<"]],"^T",null]